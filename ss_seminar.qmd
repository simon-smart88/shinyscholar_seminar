---
title: "Shinyscholar"
subtitle: "A template for creating reproducible Shiny applications"
author: "Simon Smart"
format: 
  revealjs:
    logo: images/uol_logo.png
    code-line-numbers: false
    theme: [default, custom.scss]
    chalkboard: true
    width: 1600  
    height: 900
    scale: true
    slide-number: true
server: shiny
date: "7 November 2024"
preload-iframes: false
---

## Overview

```{css}

.reveal pre.sourceCode code{
  background-color: #F0F0F0;
}

.reveal h2 {
  font-size: 2.2em;
}

ul {
  font-size:1.6em;
}

/* Stops nested increase in font size */
ul ul {
  font-size: 1em;
}

code.sourceCode {
  font-size: 0.8em;
}

.largecode code.sourceCode {
font-size: 2.2em;
}

.mediumcode code.sourceCode {
font-size: 1.6em;
}

p.smalltext {
font-size: 30px !important;
}

table {
font-size: 30px;
}

.centre_image {
  display: block !important;
  margin-left: auto !important;
  margin-right: auto !important;
}

.reveal .footer {
  display: flex;
  position: absolute;
  bottom: 100;
  width: 100%;
  margin-left: 200px;
  text-align: center;
  font-size: 0.7em;
  color: #264688;
  z-index: 2;
  margin-right: 250px;
}

/*logo*/
.reveal .slide-logo {
  height: 8% !important;
  max-width: unset !important;
  max-height: unset !important;
}

/*Shiny input and outputs*/
.shiny-input-container, .shiny-bound-output {
box-sizing: border-box;
color: rgb(51, 51, 51);
font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
font-size: 1.4em;
line-height: 50px;
margin-bottom: 30px;
max-width: 100%;
width: 50% !important;
}

.shiny-input-number .form-control .shiny-bound-input {
font-size: 1.2em;
width: 50% !important;
margin-bottom: 30px;
}


```

-   What is Shiny?
-   How should Shiny apps be developed?
-   Use of Shiny in academia
-   How Shinyscholar helps to avoid common problems
-   Disagapp as an example app 

## About me

-   Background in plant sciences and agricultural science
-   Latecomer to R, starting in 2018
-   Software developer in the Biostats group with Tim Lucas

## Shiny enables the creation of applications in R

-   R package developed by Posit/Rstudio, first released in 2012
-   Framework for developing interactive applications using R
-   Can run locally or online
-   Make it much easier to share code with non R-users

::: {.notes}
- Anything in R can be made GUI with Shiny
- Large ecosystem of packages create since
- Especially easy to make available online through Rstudio
:::

## Data flows through an analysis in discrete steps 

<img src="images/data_pipeline.svg" class="centre_image" >
 
::: footer
- Adapted from <a href="https://r4ds.hadley.nz/intro" target="_blank">Wickham (2022)</a>
:::
 
::: {.notes}
-   Analytical apps have a flow of data through them
-   Similar to an analysis, but we are providing options for the user to take their own particular path
-   Distinguish between datavis apps and analysis apps
:::

## Shiny apps are becoming increasingly popular in academia

::: columns
::: {.column width="55%"}
-   The low barrier to entry makes Shiny popular
-   Substantially increased apps as a method of dissemination
-   "shiny app" or "shiny application" in Web of Science:
:::

::: {.column width="45%"}
```{r echo = FALSE, fig.height=10}
year <- c(2012, 2015:2023) 
apps <- c(1, 4, 3, 12, 17, 39, 69, 75, 100, 134)
mod <- lm(log(apps) ~ year)

par(cex = 1.5, bg = '#e4fbf8')
plot(year, apps, pch = 16, xlab = '', ylab = 'Number of publications')
lines(seq(2012, 2023, 0.1), exp(predict(mod, data.frame(year = seq(2012, 2023, 0.1)))), col = 'blue')

```
:::
:::

::: {.notes}
-   Easier to develop than using other web frameworks
- Existing code can be adapted
:::

## Creating analytical apps lowers the barrier of entry

- Provide guidance throughout a complex analysis
- Enable users without coding skills to access cutting-edge analyses
- Enable access for restricted users e.g. in NHS

::: {.notes}
- Link to data pipeline - provide handrails for the user 
:::

## MetaBayesDTA
![](images/metabayesdta.png)

::: footer
- Cerullo *et al.* (2023) <a href="https://doi.org/10.1186/s12874-023-01910-y" target="_blank">DOI: 10.1186/s12874-023-01910-y</a>
- <a href="https://crsu.shinyapps.io/MetaBayesDTA/" target="_blank">https://crsu.shinyapps.io/MetaBayesDTA/</a>
:::

## Soil Benchmark

![](images/soil_benchmark.png)

::: footer
- <a href="https://www.soilbenchmark.com/" target="_blank">https://www.soilbenchmark.com/</a>
:::

## Kerus Cloud

![](images/kerus_cloud.png)

::: footer
- <a href="https://exploristics.com/keruscloud-platform-overview/" target="_blank">https://exploristics.com/keruscloud-platform-overview/</a>
:::

## Shinyscholar helps create high quality analytical applications

::: columns
::: {.column width="70%"}
-   Creates an empty application with a regular structure
-   Make it easier to follow software development best practices
-   Developers can concentrate on creating functionality 
:::
::: {.column width="30%"}
<img src="images/ss_logo.png" width="auto" height="auto" align="right" >
:::
:::

## Shiny apps consist of a user interface object (UI) and a server object {.largecode}

```{r eval = FALSE, echo = TRUE}
ui <- fluidPage() 

server <- function(input, output) {}

shinyApp(ui = ui, server = server)
```

::: {.notes}
- However complex, all apps have this structure
- UI creates a webpage and is displayed in the browser
- Server code is run on a server but unlike normal R code, it can be run multiple times
:::

## Data is transferred between the UI and server through the input and output {.mediumcode}

```{r eval = FALSE, echo = TRUE}
ui <- fluidPage(
  numericInput("number", "Enter a number", value = 5),
  textOutput("answer"))

server <- function(input, output) {
  output$answer <- renderText(input$number * 10)
}

shinyApp(ui, server)
```

::: {.fragment .fade-in}
```{r}
br()
numericInput("number", "Enter a number", value = 5)
textOutput("answer")
```
:::

```{r}
#| context: server
output$answer <- renderText(input$number * 10)
```

::: {.notes}
- Note number and input$number, output$answer, answer
- Whenever input values change, the code that uses them is rerun
- The beauty of shiny is that we don't have to manage the (complicated) communication process between the web page and the server
:::

## The ease of development provides advantages and disadvantages

-   Simple apps can be created in an afternoon
-   Academics rarely have training in software development
-   What started simple can quickly snowball to become very complex

## App design

-  What features do we need?
    - Generic
    - Specific
-  How should the code be structured?
-  How do we make sure that it works?

## What characteristics should academic apps have?

::: columns
::: {.column width="50%"}
::: {.fragment .fade-in}
-   Open
:::
::: {.fragment .fade-in}
-   Attributable
:::
::: {.fragment .fade-in}
-   Instructive
:::
:::

::: {.column width="50%"}

::: {.fragment .fade-in}
-   Reproducible
:::
::: {.fragment .fade-in}
-   Reliable
:::
::: {.fragment .fade-in}
-   Maintainable
:::
:::
:::

::: {.notes}
- We are all familiar with the format and conventions of papers, but they weren't always like that. Should we aim to develop similar conventions for apps?

- Open enables reuse and collaboration
- Important to recognise developers of the software like authors of a paper
- Users should be guided through inside of the application, not through watching videos or reading a guide 
- Analyses performed in the app should be reproducible outside of it
- We should be confident that it functions as intended through the use of automated testing
- Contracts are short, so it is important people unfamiliar with the code can understand what is happening.

:::

## Reproducility futureproofs analyses made in an app

-   Avoid the app being a black box
-   As a tool for learning
-   Allow users to edit and refine the analysis
-   Increasingly required when findings are published
-   If the app goes offline, the user can still get the same results

## How should app code be structured?

::: columns
::: {.column width="20%"}
:::
::: {.column width="15%"}
::: fragment
![](images/app_arch_1.svg)
:::
:::
:::

## How should app code be structured?
![](images/ROGUE_input.png)
![](images/ROGUE_output.png)

## How should app code be structured?
::: columns
::: {.column width="20%"}
:::
::: {.column width="15%"}
![](images/app_arch_1.svg)
:::

::: {.column width="15%"}
::: fragment
![](images/app_arch_2.svg)
:::
:::

::: {.column width="15%"}
::: fragment
![](images/app_arch_3.svg)
:::
:::

::: {.column width="15%"}
::: fragment
![](images/app_arch_4.svg)
:::
:::
:::

## Functions are central to R programming {.largecode}

-   Separate normal R code from application logic
-   Easier to debug
-   Enable reuse of code
-   Enable testing of the core functionality

```{r eval = FALSE, echo = TRUE}
multiply_by_ten <- function(x){
  x * 10
}
```

## Modules enable apps to be broken down into self-contained chunks

::: columns
::: {.column width="80%"}
-   Inputs and outputs for different parts are separated
-   Simplifies naming of objects
-   Easier to navigate files and maintain code
-   But they need to be able to communicate...
:::
::: {.column width="20%"}
<img src="images/modules.svg" align="right" height = 500px >
:::
:::

::: {.notes}
- Mini apps within an app
- Allows multiple objects with the same name in different modules
- Similar to chunks in Rmd / scripts in a large analysis
:::

## Testing ensures code works as intended across platforms {.mediumcode}

::: {.fragment .fade-in}
-   *Unit tests* check functions

```{r eval = FALSE, echo = TRUE}
testthat::expect_equal(multiply_by_ten(5), 50)
testthat::expect_is(multiply_by_ten(5), "numeric")
```
:::
::: {.fragment .fade-in}
-   *End-to-end tests* check the app works

```{r eval = FALSE, echo = TRUE}
app <- shinytest2::AppDriver(shinyApp(ui, server))
app$set_inputs(number = 10)
output <- app$get_values()$output
testthat::expect_equal(output$answer, 100)
```
:::
::: {.fragment .fade-in}
-   Enable *continuous integration* 
:::

## Packages ease development and distribution of code

::: columns
::: {.column width="70%"}
-   R packages parcel up code for distribution to others
-   Many tools and processes rely on code being a package
-   Enables installation in a single line
:::
::: {.column width="30%"}
<img src="images/package.png" width="auto" height="auto" align="right" >
:::
:::


## 50 apps published in 2023 were surveyed to determine current practices

-   For each, the papers, apps and source code examined
-   Papers:
    -   Do they cite packages?
    -   Do they provide source code?

## Each app was examined to determine:

-   Are they usable?
-   Are they online?
-   Do they provide instructions and explanation?
-   Do they cite packages?
-   Are they reproducible?
-   Can errors be returned to the user?
-   Can you save / load?

## Where available, source code was examined to determine:

-   How many lines of code?
-   Is it a package?
-   Are there functions?
-   Are there modules?
-   Are there tests?

## Few existing apps have these characteristics

<img src="images/app_features.svg" class="centre_image" >

::: {.notes}
- Caveat: not all were analytical applications
:::

## The size and structure of codebases varied substantially
<img src="images/code_features.svg" class="centre_image" >

## Wallace is an app for modelling species distributions
<img src="images/wallace.png" class="centre_image" >

## Wallace is an app for modelling species distributions

-   In development since 2015 with two major releases
-   Feature-rich with many ideal characteristics:

::: columns
::: {.column width="50%"}
-   Error messages
-   Logging
-   Save and load
:::
::: {.column width="50%"}
-   Reproducible
-   Cites packages used
:::
:::

::: footer
- Kass *et al.* (2018) <a href="https://doi.org/10.1111/2041-210X.12945" target="_blank">DOI: 10.1111/2041-210X.12945</a>
- Kass *et al.* (2022) <a href="https://doi.org/10.1111/ecog.06547" target="_blank">DOI: 10.1111/ecog.06547</a>
:::

## Wallace provided the basis to create a template

-  Lots of useful features that are difficult to implement
-  Removed all the modules
-  Adapted files so they could be edited programmatically

## There were still areas where Wallace could be improved upon

-   Complex interface may be difficult to navigate
-   Server function was still 1500 lines long
-   Only unit tests, no end-to-end tests
-   Potential issues with long-term reproducibility
-   Not deployed online

## Several changes were made to address these issues

-   Added a guided tour using `{rintrojs}`
-   Moved code for mapping, saving and loading to modules
-   Added end-to-end tests
-   Use `{renv}` to capture the precise environment
-   Added a Dockerfile to enable easier cloud deployment
-   Code for each module can be viewed in the app

## Shinyscholar enforces a strict structure

-   Analyses are split into components and modules
-   Each module calls a function
-   Each module is reproduced by a markdown chunk
-   Data is passed between modules through `common`

## Each module has several files associated with it
-   Function: `<component>_<module>_f.R`
-   Module: `<component>_<module>.R`
-   Markdown: `<component>_<module>.Rmd`
-   Guidance: `<component>_<module>.md`
-   Configuration: `<component>_<module>.yml`
-   Tests: `test-<component>_<module>.R`

## {data-menu-title="Shinyscholar demo"}

<iframe width="100%" height="100%" src="https://simonsmart.shinyapps.io/shinyscholar/"></iframe>

::: {.notes}
- Point out guidance and attribution
- Code
- That it is apparent from the UI where code is located
:::

## Markdown files can be merged to replicate the analysis

-   When a module is used an object becomes `TRUE`
-   Input values are stored and *knitted* into the markdown
-   Each chunk of the markdown calls the same function as the module in the app
-   The chunks for used modules are combined into one `.Rmd` file

## Input values are copied into the markdown {.mediumcode}
```{r eval = FALSE, echo = TRUE}
#```{r, echo = {{select_query_knit}}, include = {{select_query_knit}}}
poly <- matrix({{select_query_poly}}, ncol = 2, byrow = FALSE)
token <- {{select_query_token}}
ras <- select_query(poly, {{select_query_date}}, token)
raster_name <- {{select_query_name}}
#```
```

## To create a reproducible chunk {.mediumcode}

```{r eval = FALSE, echo = TRUE}
#```{r}
poly <- matrix(c(-1.54202, -1.54202, -0.718279, -0.718279, -1.54202, 52.509368, 52.789309, 52.789309, 52.509368, 52.509368), ncol = 2, byrow = FALSE)
token <- NULL
ras <- select_query(poly, "2024-10-09", token)
raster_name <- "FAPAR"
#```
```

## `create_template()` creates an empty app

```{r eval = FALSE, echo = TRUE}
modules <- data.frame(
"component" = c("load", "load", "plot", "plot"),
"long_component" = c("Load data", "Load data", "Plot data", "Plot data"),
"module" = c("user", "database", "histogram", "scatter"),
"long_module" = c("Upload your own data", "Query a database to obtain data", 
                  "Plot the data as a histogram", "Plot the data as a scatterplot"),
"map" = c(TRUE, TRUE, FALSE, FALSE),
"result" = c(FALSE, FALSE, TRUE, TRUE),
"rmd" = c(TRUE, TRUE, TRUE, TRUE),
"save" = c(TRUE, TRUE, TRUE, TRUE),
"async" = c(TRUE, TRUE, TRUE, TRUE))

common_objects = c("raster", "histogram", "scatter")

shinyscholar::create_template(
  path = file.path("~", "Documents"), name = "demo", author = "Simon E. H. Smart",
  include_map = TRUE, include_table = TRUE, include_code = TRUE, 
  common_objects = common_objects, modules = modules, install = TRUE)

demo::run_demo()
```

::: {.notes}
 - Forces a design phase upon developers

:::

## Boring, repetitive coding tasks are automated {.mediumcode}

-   `save_and_load()` and `metadata()` automate these parts

```{r echo = TRUE, eval = FALSE}
numericInput("number", "Enter a number", value = 5)

list(number = input$number) # save
updateNumericInput(session, "number", state$number) # load
common$meta$comp_mod$number <- input$number # store
comp_mod_number <- common$meta$comp_mod$number # transfer to Rmd
{{comp_mod_number}} # use in Rmd

```

::: {.notes}
-   Code required for saving/loading and reproducibility is repetitive
:::

## Slow operations can be run asynchronously

-   R runs on a single thread
-   Slow steps (fitting a model) can block others from using the app
-   If `async = TRUE` the modules are created so that functions run in the background

## Disaggregation regression enables high resolution disease mapping

::: columns
::: {.column width="20%"}
:::
::: {.column width="30%"}
<img src="images/mad_shape.png" >
:::
::: {.column width="30%"}
<img src="images/mad_pred.png">
:::
::: {.column width="20%"}
:::
:::

## There are several types of data to process
<img src="images/disag_data_types_path.svg" class="centre_image" >

## Modules are classified depending on their necessity
<img src="images/disagg_modules_path.svg" class="centre_image" >

## {data-menu-title="Disagapp demo"}
<iframe width="100%" height="100%" src="http://127.0.0.1:5000"></iframe>

## Summary

-  Shiny apps are easy to create and help disseminate methods
-  Current software development practices in academic apps could be improved
-  Shinyscholar helps create apps that are:
    - Open, attributable, instructive, reproducible reliable and maintainable

## Github

-  <a href="https://github.com/simon-smart88 " target="_blank">https://github.com/simon-smart88</a>
-   shinyscholar
-   disagapp
-   These slides
-   Introduction to shiny workshop

## Acknowledgments

::: columns
::: {.column width="50%"}
-   Wellcome
-   Wallace developers
-   Tim
-   CRSU
:::

::: {.column width="50%"}
<div> 
<img src="images/wellcome_logo.png" width="300" style = "display: block;">
<img src="images/wallace_logo.png" width="300" style = "display: block;">
</div>
:::
:::
