---
title: "Shinyscholar"
subtitle: "A template for creating reproducible Shiny applications"
author: "Simon Smart"
format: 
  revealjs:
    logo: images/uol_logo.png
    code-line-numbers: false
    theme: [default, custom.scss]
    chalkboard: true
    width: 1600  # Set your desired width in pixels
    height: 900
server: shiny
date: "7 November 2024"
preload-iframes: true
---

```{css}

.reveal pre.sourceCode code{
  background-color: #F0F0F0;
}

code.sourceCode {
  font-size: 0.8em;
}

.largecode code.sourceCode {
font-size: 1.5em;
}

.mediumcode code.sourceCode {
font-size: 1.1em;
}

p.smalltext {
font-size: 30px !important;
}

table {
font-size: 30px;
}

.reveal .footer {
  display: flex;
  position: absolute;
  bottom: 100;
  width: 100%;
  margin-left: 100px;
  text-align: center;
  font-size: 1.1em;
  color: #264688;
  z-index: 2;
  margin-right: 250px;
}

/*logo*/
.reveal .slide-logo {
  height: 100px !important;
  max-width: unset !important;
  max-height: unset !important;
}

/*Shiny input and outputs*/
.shiny-input-container, .shiny-bound-output, .shiny-input-text {
box-sizing: border-box;
color: rgb(51, 51, 51);
font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
font-size: 22px;
line-height: 25px;
margin-bottom: 15px;
max-width: 100%;
width: 400px
}


/*Datatable*/
table.dataTable {
font-size: 16px;
}

table.dataTable tbody td {
padding: 2px 2px;
}

.dataTables_wrapper, .dataTables_info {
font-size: 16px;
}

/* Shiny error message*/
.shiny-output-error-validation {
color: green;
}

/*mermaid-diagrams*/
/*input, server, output*/
.sin > rect {
    fill: #b5e9ec !important;
}
.sser > rect {
    fill: #b5ecb6 !important;
}
.sout > rect {
    fill: #d6b5ec !important;
}


```

```{r eval=TRUE, echo=FALSE}
library(shiny)
library(dplyr)
library(leaflet)
```

## Overview

-   What is Shiny?
-   Use of Shiny in academia
-   How Shinyscholar helps to avoid common problems
-   Disagapp as an example application

## About me

-   Background in plant sciences and agricultural science
-   Latecomer to R, starting in 2018
-   Software developer in the Biostats group with Tim Lucas

## Shiny enables the creation of applications in R

-   R package developed by Posit/Rstudio, first released in 2012
-   Framework for developing interactive applications using R
-   Can run locally or online
-   Make it much easier to share code with non R-users

## Shiny apps consist of a user interface object (UI) and a server object {.largecode}

```{r eval = FALSE, echo = TRUE}
ui <- fluidPage() 

server <- function(input, output) {}

shinyApp(ui = ui, server = server)
```

## Data is transferred between the UI and server through the input and output {.mediumcode}

```{r eval = FALSE, echo = TRUE}
ui <- fluidPage(
  numericInput("number", "Enter a number", value = 5),
  textOutput("answer"))

server <- function(input, output) {
  output$answer <- renderText(input$number * 10)
}

shinyApp(ui, server)
```

::: {.fragment .fade-in}
```{r}
br()
numericInput("number", "Enter a number", value = 5)
textOutput("answer")
```
:::

```{r}
#| context: server
output$answer <- renderText(input$number * 10)
```

## Soil Benchmark

![](images/soil_benchmark.png)

::: footer
https://www.soilbenchmark.com/
:::

## Keras Cloud

![](images/keras_cloud.png)

::: footer
https://exploristics.com/keruscloud-platform-overview/
:::

## Shiny apps are becoming increasingly popular in academia

::: columns
::: {.column width="50%"}
-   The low barrier to entry makes Shiny popular
-   Substantially increased apps as a method of dissemination
-   "shiny app" or "shiny application" in Web of Science:
:::

::: {.column width="50%"}
```{r echo = FALSE, fig.height=10}
year <- c(2012, 2015:2023) 
apps <- c(1, 4, 3, 12, 17, 39, 69, 75, 100, 134)
mod <- lm(log(apps) ~ year)

par(cex = 1.5, bg = '#e4fbf8')
plot(year, apps, pch = 16, xlab = '', ylab = 'Number of publications')
lines(seq(2012, 2023, 0.1), exp(predict(mod, data.frame(year = seq(2012, 2023, 0.1)))), col = 'blue')

```
:::
:::

## The ease of development provides advantages and disadvantages

-   Simple apps can be created in an afternoon
-   Academics rarely have training in software development
-   What started simple can quickly snowball to become very complex

## Data pipelines

-   Nearly all apps have a flow of data through them
-   Similar to an analysis, but we are providing options for the user to take their own particular path

![](images/data_pipeline.svg)

## Complex apps contain thousands of lines of code

![](images/disagapp.png)

## sad

```{r, embed="~/Documents/shinyscholar/inst/shiny/server.R", include= TRUE}
```

## What characteristics should academic apps have?

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Open
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Attributable
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Instructive
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Reproducible
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Reliable
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Maintainable
:::
:::

## Why reproducible?

-   Avoid the app being a black box
-   Allow users to edit and refine the analysis
-   Increasingly required when findings are published
-   If the app goes offline, the user can still get the same results

## How should apps be structured?

::: columns
::: {.column width="25%"}
::: fragment
![](images/app_arch_1.svg)
:::
:::

::: {.column width="25%"}
::: fragment
![](images/app_arch_2.svg)
:::
:::

::: {.column width="25%"}
::: fragment
![](images/app_arch_3.svg)
:::
:::

::: {.column width="25%"}
::: fragment
![](images/app_arch_4.svg)
:::
:::
:::

## Functions are central to R programming {.largecode}

-   Separate normal R code from application logic
-   Easier to debug
-   Enable reuse of code
-   Enable testing of the core functionality

```{r eval = FALSE, echo = TRUE}
multiply_by_ten <- function(x){
  return(x * 10)
}
```

## Modules enable apps to be broken down into self-contained chunks

-   Inputs and outputs for different parts are separated
-   Simplifies naming of objects
-   Easier to navigate and maintain

::: {.fragment .fade-in}
-   But they need to be able to communicate...
:::

## Testing ensures code works as intended across platforms

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   *Unit tests* check functions

```{r eval = FALSE, echo = TRUE}
testthat::expect_equal(multiply_by_ten(5), 50)
testthat::expect_is(multiply_by_ten(5), "numeric")
```
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   *End-to-end tests* check the app works

```{r eval = FALSE, echo = TRUE}
app <- shinytest2::AppDriver(shinyApp(ui, server))
app$set_inputs(number = 10)
output <- app$get_values()$output
testthat::expect_equal(output$answer, 100)
```
:::
:::

::: {.fragment .fade-in}
::: {.fragment .semi-fade-out}
-   Enable *continuous integration* - we know when we break something
:::
:::

## Packages ease development and distribution of code

-   R packages parcel up code for distribution to others
-   Many tools and processes rely on packaging
-   Enables installation in a single line

## 50 apps published in 2023 were surveyed to determine current practices

-   For each, the papers, apps and source code examined
-   Papers:
    -   Do they cite packages?
    -   Do they provide source code?

## Each app was examined to determine:

-   Are they usable?
-   Are they online?
-   Do they provide instructions and explanation?
-   Do they cite packages?
-   Are they reproducible?
-   Can errors be returned to the user?
-   Can you save / load?

## Where available, source code was examined to determine:

-   Is it a package?
-   Are there functions?
-   Are there modules?
-   Are there tests?
-   How many lines of code?

## Few existing apps have these characteristics

-   Caveat: not all were analytical applications

![](images/app_features.svg)

## The size and structure of codebases varied substantially

*(a)* Total lines, *(b)* Lines in `app.R` or `server.R`, *(c)* Mean lines per `.R` file, *(d)* %age in `app.R` or `server.R`

![](images/code_features.svg)

## Screenshots?


## Wallace is an app for modelling species distributions

-   In development since 2015 with two major releases
-   Feature-rich with many ideal characteristics:
    -   Error messages
    -   Logging
    -   Save and load
    -   Reproducible
    -   Cites packages used

::: footer
-   Kass *et al.* (2018) <a href="https://doi.org/10.1111/2041-210X.12945" target="_blank">DOI: 10.1111/2041-210X.12945</a>
-   Kass *et al.* (2022) <a href="https://doi.org/10.1111/ecog.06547" target="_blank">DOI: 10.1111/ecog.06547</a>.\
:::

## Wallace provided the basis to create a template

-  Removed all the modules 

## There were still areas to improve Wallace

-   Complex interface may be difficult to navigate
-   Server function was still 1500 lines long
-   Only unit tests, no end-to-end tests
-   Potential issues with long-term reproducibility
-   Not deployed online


## C

-   Added a guided tour using `{rintrojs}`
-   Moved code for mapping, saving and loading to modules
-   Added end-to-end tests
-   Use `{renv}` to capture the precise environment
-   Added a Dockerfile to enable easier cloud deployment


-   Code for each module can be viewed in the app
-   Added introduction

## Shinyscholar enforces a strict structure

-   Analyses are split into components and modules
-   Each module calls a function
-   Each module is reproduced by a markdown chunk
-   Files have the format of `<component>_<module>_f.R`, `<component>_<module>.R`, `<component>_<module>.Rmd`

## {data-menu-title="Shinyscholar demo"}

<iframe width="100%" height="100%" src="http://127.0.0.1:5000">

</iframe>

## Markdown files can be merged to replicate the analysis

-   When a module is used some object comes into existence
-   Input values are stored and *knitted* into the markdown
-   Each chunk of the markdown calls the same function as the module in the app
-   The chunks for used modules are combined into one `.Rmd` file

## Demo app make with SS

```{r eval = FALSE, echo = TRUE}
modules <- data.frame(
"component" = c("load", "load", "plot", "plot"),
"long_component" = c("Load data", "Load data", "Plot data", "Plot data"),
"module" = c("user", "database", "histogram", "scatter"),
"long_module" = c("Upload your own data", "Query a database to obtain data", 
                  "Plot the data as a histogram", "Plot the data as a scatterplot"),
"map" = c(TRUE, TRUE, FALSE, FALSE),
"result" = c(FALSE, FALSE, TRUE, TRUE),
"rmd" = c(TRUE, TRUE, TRUE, TRUE),
"save" = c(TRUE, TRUE, TRUE, TRUE))

common_objects = c("raster", "histogram", "scatter")

shinyscholar::create_template(
  path = file.path("~", "Documents"), name = "demo", author = "Simon E. H. Smart",
  include_map = TRUE, include_table = TRUE, include_code = TRUE, 
  common_objects = common_objects, modules = modules, install = TRUE)
```

## Boring, repetitive tasks are automated

-   Code required for saving/loading and reproducibility is repetitive
-   `save_and_load()` and `metadata()` automate these parts

```{r echo = TRUE, eval = FALSE}
numericInput("number", "Enter a number", value = 5)

list(number = input$number)
updateNumericInput(session, "number", state$number)
common$meta$comp_mod$number <- input$number
comp_mod_number <- common$meta$comp_mod$number
{{comp_mod_number}}

```

## Slow operations can be run asynchronously

-   R runs on a single thread
-   Slow steps (fitting a model) can block others from using the app
-   

## Forces a design phase upon developers

## Make a figure showing all the modules

![](images/disagg_modules_path.svg)

## Disagapp

![](images/disag_data_types_path.svg)

## Github

-   simon-smart88
-   shinyscholar
-   disagapp
-   These slides
-   Introduction to shiny workshop

## Acknowledgments

::: columns
::: {.column width="50%"}
-   Wellcome
-   Wallace developers
-   Tim
-   CRSU
:::

::: {.column width="50%"}
![](images/wellcome_logo.png) ![](images/wallace_logo.png)
:::
:::
